name: Generic App Updater

on:
  schedule:
    - cron: '0 22 * * *'
  workflow_dispatch:

jobs:
  check_and_upload_apps:
    runs-on: ubuntu-latest
    permissions:
      contents: write # برای ایجاد ریلیز، آپلود فایل‌ها و کامیت کردن فایل ردیابی

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 packaging selenium webdriver-manager

      - name: Set up Google Chrome and ChromeDriver
        run: |
          echo "Setting up Google Chrome..."
          sudo apt-get update -y
          sudo apt-get install -y wget gnupg jq
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
          sudo apt-get update -y
          sudo apt-get install -y google-chrome-stable
          echo "Google Chrome Version:"
          google-chrome --version
          echo "ChromeDriver will be managed by webdriver-manager in Python script."

      - name: Get Current Date (برای کامیت)
        id: date
        run: echo "TODAY=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Create tracking and URL files if not exists
        run: |
          touch versions_tracker.json
          touch urls_to_check.txt
          if [ ! -s versions_tracker.json ]; then echo "{}" > versions_tracker.json; fi

      - name: Run App Updater Script (using Selenium)
        id: app_check
        run: python scripts/app_updater.py

      - name: Process Updates and Create New Release
        # این شرط تضمین می‌کند که فقط در صورت وجود آپدیت، ریلیز ساخته شود
        if: steps.app_check.outcome == 'success' && steps.app_check.outputs.updates_count > 0
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Processing updates found. Count: ${{ steps.app_check.outputs.updates_count }}"
          UPDATES_FILE="updates_found.json"
          TRACKER_FILE="versions_tracker.json"
          DOWNLOAD_DIR="release_assets"
          TIMESTAMP=$(date +'%Y-%m-%d-%H%M%S') # تگ زمانی منحصر به فرد
          RELEASE_TAG="updates-${TIMESTAMP}" # تگ جدید و منحصر به فرد
          RELEASE_TITLE="App Updates - ${TIMESTAMP}" # عنوان جدید
          RELEASE_NOTES_FILE="release_notes.md"

          mkdir -p $DOWNLOAD_DIR
          echo "## App Updates - ${TIMESTAMP}" > $RELEASE_NOTES_FILE
          echo "" >> $RELEASE_NOTES_FILE
          echo "The following applications have been updated:" >> $RELEASE_NOTES_FILE
          echo "" >> $RELEASE_NOTES_FILE

          TEMP_TRACKER_FILE=$(mktemp)
          cp $TRACKER_FILE $TEMP_TRACKER_FILE

          # حلقه برای دانلود همه فایل ها و ساخت یادداشت ها
          jq -c '.[]' $UPDATES_FILE | while IFS= read -r update_item; do
            APP_NAME=$(echo "$update_item" | jq -r '.app_name')
            VERSION=$(echo "$update_item" | jq -r '.version')
            VARIANT=$(echo "$update_item" | jq -r '.variant')
            DOWNLOAD_URL=$(echo "$update_item" | jq -r '.download_url')
            PAGE_URL=$(echo "$update_item" | jq -r '.page_url')
            SUGGESTED_FILENAME=$(echo "$update_item" | jq -r '.suggested_filename')
            DOWNLOAD_PATH="$DOWNLOAD_DIR/$SUGGESTED_FILENAME"

            echo "  Downloading $APP_NAME v$VERSION ($VARIANT)..."
            curl -L -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36" -o "$DOWNLOAD_PATH" "$DOWNLOAD_URL"
            
            if [ $? -eq 0 ]; then
              echo "  Download complete: $DOWNLOAD_PATH"
              echo "* **$APP_NAME v$VERSION ($VARIANT)** - [Source Page]($PAGE_URL)" >> $RELEASE_NOTES_FILE
            else
              echo "  [ERROR] Failed to download $SUGGESTED_FILENAME. Skipping."
              rm -f "$DOWNLOAD_PATH"
            fi
          done

          sleep 2

          # اگر هیچ فایلی با موفقیت دانلود نشد، خارج شوید (احتیاط بیشتر)
          if [ ! -n "$(ls -A $DOWNLOAD_DIR)" ]; then
            echo "No files were successfully downloaded. No release will be created."
            rm -rf $DOWNLOAD_DIR $RELEASE_NOTES_FILE $TEMP_TRACKER_FILE
            exit 0
          fi

          echo "Total files successfully downloaded: $(ls -1 $DOWNLOAD_DIR | wc -l)"

          # همیشه یک ریلیز جدید ایجاد کن
          echo "  Creating new release: $RELEASE_TAG"
          gh release create "$RELEASE_TAG" $DOWNLOAD_DIR/* \
            --title "$RELEASE_TITLE" \
            --notes-file "$RELEASE_NOTES_FILE"
          RELEASE_STATUS=$?

          # آپدیت فایل ردیابی در صورت موفقیت ریلیز
          if [ $RELEASE_STATUS -eq 0 ]; then
            echo "  Release $RELEASE_TAG created successfully."
            jq -c '.[]' $UPDATES_FILE | while IFS= read -r update_item; do
              TRACKING_ID=$(echo "$update_item" | jq -r '.tracking_id')
              CURRENT_VERSION_FOR_TRACKING=$(echo "$update_item" | jq -r '.current_version_for_tracking')
              SUGGESTED_FILENAME=$(echo "$update_item" | jq -r '.suggested_filename')
              if [ -f "$DOWNLOAD_DIR/$SUGGESTED_FILENAME" ]; then
                  jq --arg id "$TRACKING_ID" --arg ver "$CURRENT_VERSION_FOR_TRACKING" '.[$id] = $ver' $TEMP_TRACKER_FILE > $TEMP_TRACKER_FILE.tmp && mv $TEMP_TRACKER_FILE.tmp $TEMP_TRACKER_FILE
              fi
            done
            mv $TEMP_TRACKER_FILE $TRACKER_FILE
            echo "  Tracker file updated."
          else
            echo "  [ERROR] Failed to create release $RELEASE_TAG. Tracker file will not be updated."
            rm -f $TEMP_TRACKER_FILE
          fi

          rm -rf $DOWNLOAD_DIR $RELEASE_NOTES_FILE

      - name: Commit Tracking File
        if: always() 
        run: |
          git config --global user.name 'GitHub Action Bot'
          git config --global user.email 'actions@github.com'
          
          git add versions_tracker.json
          if ! git diff --staged --quiet versions_tracker.json; then
            echo "Committing changes to versions_tracker.json..."
            git commit -m "Update app versions tracker (${{ steps.date.outputs.TODAY }})"
            for i in 1 2 3; do 
              git pull --rebase origin ${{ github.ref_name }} || echo "Pull rebase failed, continuing push attempt."
              git push && break 
              echo "Push failed (attempt $i). Retrying in 10 seconds..."
              sleep 10
            done
          else
            echo "No changes in versions_tracker.json to commit."
          fi
